 ------
 Deploy Maven Website
 ------
 Barrie Treloar
 Herv√© Boutemy
 ------
 2013-09-23
 ------

~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/doxia/references/apt-format.html

Introduction

 This document gives step-by-step instructions for deploying the main Maven {{{http://maven.apache.org}http://maven.apache.org}} website
 and components reference documentation.

Overview

 Since December 2012, the overall website uses svnpubsub mechanism and the main website uses Apache CMS:

[website-overview.png] Website mechanisms overview


How main website publication works

 Maven main website ({{http://maven.apache.org}}) is generated with {{{/plugins/maven-site-plugin}maven-site-plugin}} from a source tree
 stored in svn: {{https://svn.apache.org/repos/asf/maven/site/trunk}}.

 [[1]] <<edit source content>> in one of the following ways:

   [[a]] use the CMS UI through your web browser: {{{https://cms.apache.org/maven/}https://cms.apache.org/maven/}}

     * Go to {{https://cms.apache.org/maven/}}.

     * Click link "Get Maven Working Copy".

     * Navigate to the content you want to modify.

     * Once you have modified the content, commit with the button "Submit".

     []

   [[b]] checkout the source content locally, modify it with your favorite text editor, eventually test the result (<<<mvn site>>>), then check-in source modifications.

   []

   after source tree is modified in svn, a Buildbot job is triggered: {{http://ci.apache.org/builders/maven-site-staging}}

   [[1]] it builds the HTML site using {{{/plugins/maven-site-plugin}maven-site-plugin}}: <<<mvn site>>>,

   [[2]] it publishes generated HTML content to CMS staging svn area: {{https://svn.apache.org/repos/infra/websites/staging/maven/trunk/content/}}.

   [[3]] svnpubsub mecanism transfers svn CMS staging content to live CMS staging site: {{http://maven.staging.apache.org}},

   []

 [[2]] if everything is good, <<publish modifications>> using CMS publish: {{https://cms.apache.org/maven/publish}}

   [[1]] CMS copies CMS staging svn area content to production svn area: {{https://svn.apache.org/repos/infra/websites/production/maven/content/}},

   [[2]] as previous operation will delete content not built from website source, CMS re-adds content identified in {{{http://maven.apache.org/extpaths.txt}<<<extpaths.txt>>>}},

   [[3]] svnpubsub mecanism transfers svn production content to live production site: {{http://maven.apache.org}}.

 []

 Notice Doxia uses the exact same mecanisms:

 * svn source tree: {{https://svn.apache.org/repos/asf/maven/doxia/site/trunk}}

 * CMS UI: {{https://cms.apache.org/maven-doxia/}}

 * Buildbot job: {{http://ci.apache.org/builders/maven-doxia-site-staging}}

 * staging svn area: {{https://svn.apache.org/repos/infra/websites/staging/maven-doxia/trunk/content/}}

 * live staging site: {{http://maven-doxia.staging.apache.org}}

 * CMS publish: {{https://cms.apache.org/maven-doxia/publish}}

 * production svn area: {{https://svn.apache.org/repos/infra/websites/production/maven-doxia/content/}}

 * live production site: {{http://maven.apache.org/doxia}}, with its {{{http://maven.apache.org/doxia/extpaths.txt}<<<extpaths.txt>>>}}

 []


How components reference documentation publication works

 Components don't use CMS: components reference documentation are generated from full sources, with both handwritten content (like Maven main site)
 and generated content from sources (javadoc, unit-test results, integration test results...).

 To publish component reference documentation:

 [[0]] prerequisite: eventually build the component if it has not been done previously, or some build or integration reports may miss information:

+----------+
mvn -Prun-its install
+----------+

 [[1]] build the reference documentation:

+----------+
mvn -Preporting site
+----------+

 [[2]] if the component has multiple modules, locally stage the site:

+----------+
mvn site:stage
+----------+

 [[3]] stage the reference documentation to website production svn area, using
 {{{/plugins/maven-scm-publish-plugin}maven-scm-publish-plugin}}: (TODO: explanations on configuration in pom to xxx-LATEST)

+----------+
mvn scm-publish:publish-scm
+----------+

 svnpubsub mecanism transfers svn production content to live production site

   []

 []

 When doing a release, previous xxx-LATEST content needs to be archived to versioned directory and replace current content (TODO: explanations).
 This is done with svn operations on website production svn area:

+----------+
svn cp https://svn.apache.org/repos/infra/websites/production/maven/content/.../xxx-LATEST https://svn.apache.org/repos/infra/websites/production/maven/content/.../xxx-$version
+----------+
 